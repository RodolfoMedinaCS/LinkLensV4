from fastapi import FastAPI, HTTPException, BackgroundTasks
from pydantic import BaseModel, Field
from typing import Optional, List, Dict
import uvicorn
import os

# Placeholder for the scraping logic
from scraper import scrape_and_update_link

# Load environment variables
from dotenv import load_dotenv
load_dotenv()

app = FastAPI(
    title="LinkLens AI Engine",
    description="API for LinkLens AI functionality including summarization, clustering, and semantic search",
    version="0.1.0"
)

class Link(BaseModel):
    url: str
    title: str = None
    description: str = None
    content: str = None

class Summary(BaseModel):
    summary: str

class ScrapeRequest(BaseModel):
    url: str
    link_id: str = Field(..., alias='link_id')

class ScrapeResponse(BaseModel):
    url: str
    title: Optional[str]
    description: Optional[str]
    author: Optional[str]
    publicationDate: Optional[str]
    siteName: Optional[str]
    language: Optional[str]
    mainImage: Optional[str]
    favicon: Optional[str]
    keywords: Optional[List[str]]
    mainContent: Dict[str, Optional[str]]
    structuredData: Dict[str, Optional[List[Dict]]]
    rawHtml: str

@app.get("/")
def read_root():
    return {
        "service": "LinkLens AI Engine",
        "status": "running",
        "version": "0.1.0"
    }

@app.post("/summarize", response_model=Summary)
async def summarize_link(link: Link):
    """
    Generates a summary for a given link
    """
    # Placeholder implementation
    return {
        "summary": f"This is a placeholder summary for '{link.title}'. In the full implementation, this would be generated by an LLM."
    }

@app.get("/health")
def health_check():
    return {"status": "ok"}

@app.post("/scrape")
async def scrape(request: ScrapeRequest, background_tasks: BackgroundTasks):
    """
    Accepts a scrape request and adds it to a background queue.
    Returns immediately with a 'processing_accepted' status.
    """
    background_tasks.add_task(scrape_and_update_link, request.link_id, request.url)
    return {"status": "processing_accepted", "link_id": request.link_id}

if __name__ == "__main__":
    uvicorn.run("main:app", host="0.0.0.0", port=8000, reload=True) 